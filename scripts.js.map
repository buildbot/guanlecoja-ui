{"version":3,"sources":["module/main.module.js","module/breadcrumb_service/breadcrumb.service.js","module/menu_service/menu.service.js","module/notification_service/httpinterceptor.js","module/notification_service/notification.service.js","module/notification_widget/notification.directive.js","module/page_with_sidebar/page_with_sidebar.directive.js","module/topbar/topbar.directive.js","module/topbar-contextual-actions/topbar-contextual-actions.directive.js","module/notification_widget/notification.tpl.jade","module/page_with_sidebar/page_with_sidebar.tpl.jade","module/topbar/topbar.tpl.jade","module/topbar-contextual-actions/topbar-contextual-actions.tpl.jade"],"names":[],"mappings":"AAAA;AACA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACptCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;iFChDA;ACAA;ACAA;ACAA","file":"scripts.js","sourcesContent":["angular.module(\"guanlecoja.ui\", [\"ui.bootstrap\", \"ui.router\", \"ngAnimate\"]);\n","/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n// a simple service to abstract breadcrumb configuration\nclass glBreadcrumb {\n    constructor($rootScope) { this.$rootScope = $rootScope; ({}); }\n\n    setBreadcrumb(breadcrumb) {\n        return this.$rootScope.$broadcast(\"glBreadcrumb\", breadcrumb);\n    }\n}\n\n\n\nangular.module('guanlecoja.ui')\n.service('glBreadcrumbService', ['$rootScope', glBreadcrumb]);\n","/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS206: Consider reworking classes to avoid initClass\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass GlMenu {\n    static initClass() {\n\n        this.prototype.appTitle = \"set AppTitle using GlMenuServiceProvider.setAppTitle\";\n\n        this.prototype.$get = [\"$state\", function($state) {\n            let group;\n            for (let state of Array.from($state.get().slice(1))) {\n                ({ group } = state.data);\n                if (group == null) {\n                    continue;\n                }\n\n                if (!this.groups.hasOwnProperty(group)) {\n                    throw Error(`group ${group} has not been defined with glMenuProvider.group(). has: ${_.keys(this.groups)}`);\n                }\n\n                this.groups[group].items.push({\n                    caption: state.data.caption || _.capitalize(state.name),\n                    sref: state.name\n                });\n            }\n\n            for (let name in this.groups) {\n                // if a group has only no item, we juste delete it\n                group = this.groups[name];\n                if ((group.items.length === 0) && !group.separator) {\n                    delete this.groups[name];\n                // if a group has only one item, then we put the group == the item\n                } else if (group.items.length === 1) {\n                    const item = group.items[0];\n                    group.caption = item.caption;\n                    group.sref = item.sref;\n                    group.items = [];\n                } else {\n                    group.sref = \".\";\n                }\n            }\n            const groups = _.values(this.groups);\n            groups.sort((a,b) => a.order - b.order);\n            const self = this;\n            return {\n                getGroups() { return groups; },\n                getDefaultGroup() { return self.defaultGroup; },\n                getFooter() { return self.footer; },\n                getAppTitle() { return self.appTitle; }\n            };\n        }\n        ];\n    }\n    constructor() {\n        this.groups = {};\n        this.defaultGroup = null;\n        this.footer = [];\n    }\n\n    addGroup(group) {\n        group.items = [];\n        if (group.order == null) { group.order = 99; }\n        this.groups[group.name] = group;\n        return this.groups;\n    }\n\n    setDefaultGroup(group) {\n        return this.defaultGroup = group;\n    }\n\n    setFooter(footer) {\n        return this.footer = footer;\n    }\n\n    setAppTitle(title) {\n        return this.appTitle = title;\n    }\n}\nGlMenu.initClass();\n\n\nangular.module('guanlecoja.ui')\n.provider('glMenuService', [GlMenu]);\n","/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n// I intercept the http errors and put them in the notification service\n// in order to enable it, please add following code in you config:\n\n//class AddInterceptor extends Config\n//    constructor: ($httpProvider) ->\n//        $httpProvider.responseInterceptors.push('glHttpInterceptor')\n\n\nclass glHttpInterceptor {\n    constructor(glNotificationService, $q, $timeout) {\n        return function(promise) {\n            const errorHandler =  function(res) {\n                let msg;\n                try {\n                    msg = `${res.status}:${res.data.error} ` +\n                    `when:${res.config.method} ${res.config.url}`;\n                } catch (e) {\n                    msg = res.toString();\n                }\n                $timeout((() => glNotificationService.network(msg)), 100);\n                return $q.reject(res);\n            };\n\n            return promise.then(angular.identity, errorHandler);\n        };\n    }\n}\n\n\nangular.module('guanlecoja.ui')\n.factory('glHttpInterceptor', ['glNotificationService', '$q', '$timeout', glHttpInterceptor]);\n","/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass glNotification {\n    constructor($rootScope, $timeout) {\n        this.$rootScope = $rootScope;\n        this.$timeout = $timeout;\n        this.notifications = [];\n        this.curid = 0;\n        null;\n    }\n\n    notify(opts) {\n        this.curid += 1;\n        if (opts.title == null) { opts.title = \"Info\"; }\n        opts.id = this.curid;\n        let id = this.curid;\n        if (opts.group != null) {\n            for (let i in this.notifications) {\n                const n = this.notifications[i];\n                if (opts.group === n.group) {\n                    id = i;\n                    n.msg += `\\n${opts.msg}`;\n                }\n            }\n        }\n        if (id === this.curid) {\n            this.notifications.push(opts);\n        }\n        return null;\n    }\n\n    // some shortcuts...\n    error(opts) {\n        if (opts.title == null) { opts.title = \"Error\"; }\n        return this.notify(opts);\n    }\n\n    network(opts) {\n        if (opts.title == null) { opts.title = \"Network issue\"; }\n        if (opts.group == null) { opts.group = \"Network\"; }\n        return this.notify(opts);\n    }\n\n    dismiss(id) {\n        for (let i in this.notifications) {\n            const n = this.notifications[i];\n            if (n.id === id) {\n                this.notifications.splice(i, 1);\n                return null;\n            }\n        }\n        return null;\n    }\n}\n\n\nangular.module('guanlecoja.ui')\n.service('glNotificationService', ['$rootScope', '$timeout', glNotification]);\n","/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass GlNotification {\n    constructor() {\n        return {\n            replace: true,\n            transclude: true,\n            restrict: 'E',\n            scope: false,\n            controllerAs: \"n\",\n            templateUrl: \"guanlecoja.ui/views/notification.html\",\n            controller: \"_glNotificationController\"\n        };\n    }\n}\n\nclass _glNotification {\n\n    constructor($scope, glNotificationService) {\n        this.$scope = $scope;\n        this.glNotificationService = glNotificationService;\n        this.notifications = this.glNotificationService.notifications;\n        null;\n    }\n\n    dismiss(id, e) {\n        this.glNotificationService.dismiss(id);\n        e.stopPropagation();\n        return null;\n    }\n}\n\n\nangular.module('guanlecoja.ui')\n.directive('glNotification', [GlNotification])\n.controller('_glNotificationController', ['$scope', 'glNotificationService', _glNotification]);","/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass GlPageWithSidebar {\n    constructor() {\n        return {\n            replace: true,\n            transclude: true,\n            restrict: 'E',\n            scope: false,\n            controllerAs: \"page\",\n            templateUrl: \"guanlecoja.ui/views/page_with_sidebar.html\",\n            controller: \"_glPageWithSidebarController\"\n        };\n    }\n}\n\nclass _glPageWithSidebar {\n    constructor($scope, glMenuService, $timeout, $window) {\n\n        // by default, pin sidebar only if window is wide enough (collapse by default if narrow)\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.$window = $window;\n        this.sidebarPinned = this.$window.innerWidth > 800;\n        // If user has previously pinned or unpinned the sidebar, use the saved value from localStorage\n        const sidebarWasPinned = this.$window.localStorage.sidebarPinned;\n        if ( (sidebarWasPinned === \"true\") || (sidebarWasPinned === \"false\") ) { // note -- localstorage only stores strings,  converts bools to string.\n            this.sidebarPinned = sidebarWasPinned !== \"false\";\n        }\n\n        this.groups = glMenuService.getGroups();\n        this.footer = glMenuService.getFooter();\n        this.appTitle = glMenuService.getAppTitle();\n        this.activeGroup = glMenuService.getDefaultGroup();\n        this.inSidebar = false;\n        this.sidebarActive = this.sidebarPinned;\n    }\n\n    toggleSidebarPinned() {\n        this.sidebarPinned=!this.sidebarPinned;\n        return this.$window.localStorage.sidebarPinned = this.sidebarPinned;\n    }\n\n    toggleGroup(group) {\n        if (this.activeGroup!==group) {\n            return this.activeGroup=group;\n        } else {\n            return this.activeGroup=null;\n        }\n    }\n\n    enterSidebar() {\n        return this.inSidebar = true;\n    }\n\n    hideSidebar() {\n        this.sidebarActive = false;\n        return this.inSidebar = false;\n    }\n\n    leaveSidebar() {\n        this.inSidebar = false;\n        if (this.timeout != null) {\n            this.$timeout.cancel(this.timeout);\n            this.timeout = undefined;\n        }\n        return this.timeout = this.$timeout((() => {\n            if (!this.inSidebar && !this.sidebarPinned) {\n                this.sidebarActive = false;\n                return this.activeGroup = null;\n            }\n        }\n            ), 500);\n    }\n}\n\n\nangular.module('guanlecoja.ui')\n.directive('glPageWithSidebar', [GlPageWithSidebar])\n.controller('_glPageWithSidebarController', ['$scope', 'glMenuService', '$timeout', '$window', _glPageWithSidebar]);","/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass GlTopbar {\n    constructor() {\n        return {\n            replace: true,\n            transclude: true,\n            restrict: 'E',\n            scope: false,\n            controllerAs: \"page\",\n            templateUrl: \"guanlecoja.ui/views/topbar.html\",\n            controller: \"_glTopbarController\"\n        };\n    }\n}\n\nclass _glTopbar {\n    constructor($scope, glMenuService, $location) {\n        let groups = glMenuService.getGroups();\n        groups = _.zipObject(_.map(groups, g => g.name), groups);\n        $scope.appTitle = glMenuService.getAppTitle();\n\n        $scope.$on(\"$stateChangeStart\", function(ev, state) {\n            $scope.breadcrumb = [];\n            if ((state.data != null ? state.data.group : undefined) && ((state.data != null ? state.data.caption : undefined) !== groups[state.data.group].caption)) {\n                $scope.breadcrumb.push({\n                    caption: groups[state.data.group].caption});\n            }\n            return $scope.breadcrumb.push({\n                caption: (state.data != null ? state.data.caption : undefined) || _.capitalize(state.name),\n                href: `#${$location.hash()}`\n            });\n        });\n\n        $scope.$on(\"glBreadcrumb\", (e, data) => $scope.breadcrumb = data);\n    }\n}\n\n\nangular.module('guanlecoja.ui')\n.directive('glTopbar', [GlTopbar])\n.controller('_glTopbarController', ['$scope', 'glMenuService', '$location', _glTopbar]);\n","/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass GlTopbarContextualActions {\n    constructor() {\n        return {\n            replace: true,\n            restrict: 'E',\n            scope: true,\n            templateUrl: \"guanlecoja.ui/views/topbar-contextual-actions.html\",\n            controller: \"_glTopbarContextualActionsController\"\n        };\n    }\n}\n\n\nclass _glTopbarContextualActions {\n    constructor($scope, $sce) {\n\n        $scope.$on(\"$stateChangeStart\", (ev, state) => $scope.actions = []);\n\n        $scope.$on(\"glSetContextualActions\", function(e, data) {\n            for (let item of Array.from(data)) {\n                if (item.extra_class == null) { item.extra_class = \"\"; }\n            }\n\n            return $scope.actions = data;\n        });\n    }\n}\n\n// a simple service to abstract TopbarContextualActions configuration\nclass glTopbarContextualActions {\n    constructor($rootScope) { this.$rootScope = $rootScope; ({}); }\n\n    setContextualActions(actions) {\n        return this.$rootScope.$broadcast(\"glSetContextualActions\", actions);\n    }\n}\n\n\nangular.module('guanlecoja.ui')\n.directive('glTopbarContextualActions', [GlTopbarContextualActions])\n.controller('_glTopbarContextualActionsController', ['$scope', '$sce', _glTopbarContextualActions])\n.service('glTopbarContextualActionsService', ['$rootScope', glTopbarContextualActions]);","li.dropdown.notifications(uib-dropdown)\n    a(uib-dropdown-toggle)\n        i.fa.fa-bell-o.fa-lg(ng-class=\"{'fa-ringing': n.notifications.length > 0 }\")\n    ul.uib-dropdown-menu.dropdown-menu.dropdown-menu-right(dropdown-toggle)\n        li.dropdown-header\n            | Notifications\n        li.divider\n        div(ng-repeat=\"msg in n.notifications\")\n          li\n            .item\n                button.close(ng-click=\"n.dismiss(msg.id, $event)\") &times;\n                .title {{msg.title}}:\n                .msg {{msg.msg}}\n          li.divider\n        li(ng-hide=\"n.notifications.length>0\")\n            .item\n                small.msg  all caught up!\n",".gl-page-with-sidebar(ng-class=\"{'active': page.sidebarActive, 'pinned': page.sidebarPinned}\")\n    .sidebar.sidebar-blue(ng-mouseenter='page.enterSidebar()',ng-mouseleave='page.leaveSidebar()',ng-click='page.sidebarActive=true')\n        ul\n            li.sidebar-main\n                a(href='javascript:')\n                    | {{page.appTitle}}\n                    span.menu-icon.fa.fa-bars(ng-hide=\"page.sidebarActive\", ng-click='page.sidebarActive=!page.sidebarActive')\n                    span.menu-icon.fa.fa-thumb-tack(ng-show=\"page.sidebarActive\", ng-click=\"page.toggleSidebarPinned()\", ng-class=\"{'fa-45': !page.sidebarPinned}\")\n            li.sidebar-title\n                span NAVIGATION\n            div(ng-repeat=\"group in page.groups\")\n                div(ng-if=\"group.items.length > 0\")\n                    li.sidebar-list\n                        a(ng-click='page.toggleGroup(group)')\n                            i.fa.fa-angle-right\n                            | &nbsp;{{group.caption}}\n                            span.menu-icon.fa(ng-class=\"'fa-' + group.icon\")\n                    li.sidebar-list.subitem(ng-class=\"{'active': page.activeGroup==group}\", ng-repeat=\"item in group.items\")\n                        a(ui-sref='{{item.sref}}', ng-click='page.hideSidebar()')\n                            | {{item.caption}}\n                div(ng-if=\"group.items.length == 0\")\n                    div(ng-if=\"group.separator\")\n                        li.sidebar-title\n                            span {{group.caption}}\n                    div(ng-if=\"!group.separator\")\n                        li.sidebar-separator(ng-if=\"!$first\")\n                        li.sidebar-list\n                            a(ui-sref='{{group.sref}}', ng-click='page.toggleGroup(group)')\n                                | {{group.caption}}\n                                span.menu-icon.fa(ng-class=\"'fa-' + group.icon\")\n        .sidebar-footer\n            .col-xs-4(ng-repeat=\"item in page.footer\")\n                a(ng-href='{{item.href}}')\n                    | {{item.caption}}\n    .content\n        div(ng-transclude)\n","nav.navbar.navbar-default\n    .container-fluid\n        .navbar-header\n            button.navbar-toggle.collapsed(\n            type=\"button\", ng-click=\"collapse=!collapse\", ng-init=\"collapse=1\" aria-expanded=\"false\")\n                span.sr-only Toggle navigation\n                span.icon-bar\n                span.icon-bar\n                span.icon-bar\n            a.navbar-brand {{appTitle}}\n            ol.breadcrumb\n                li(ng-repeat=\"b in breadcrumb\")\n                    a(ng-if=\"b.sref\", ui-sref=\"{{b.sref}}\") {{b.caption}}\n                    a(ng-if=\"b.href\", ng-href=\"{{b.href}}\") {{b.caption}}\n                    span(ng-if=\"b.href == undefined && b.sref == undefined\", ng-href=\"{{b.href}}\") {{b.caption}}\n        .navbar-collapse.collapse.pull-right(ng-class='{\"in\": !collapse}')\n            ul.nav.navbar-nav(ng-transclude)\n","form.navbar-form.navbar-left\n    .form-group(ng-repeat=\"a in actions\")\n        button.btn.btn-default(type=\"button\" ng-class=\"a.extra_class\" ng-click=\"a.action()\", title=\"{{a.help}}\")\n            i.fa(ng-if=\"a.icon\", ng-class=\"'fa-' + a.icon\")\n            span(ng-if=\"a.icon&&a.caption\") &nbsp;\n            | {{::a.caption}}\n        | &nbsp;\n"],"sourceRoot":"/source/"}